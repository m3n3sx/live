// tests/global-teardown.js
async function globalTeardown() {
    console.log('üßπ Rozpoczynam czyszczenie po testach MAS V2...');
    
    // Wyczy≈õƒá zmienne ≈õrodowiskowe
    delete process.env.PLAYWRIGHT_TEST_BASE_URL;
    delete process.env.PLAYWRIGHT_TEST_USERNAME;
    delete process.env.PLAYWRIGHT_TEST_PASSWORD;
    
    // Wygeneruj podsumowanie test√≥w
    const fs = require('fs');
    const path = require('path');
    
    try {
        // Sprawd≈∫ czy istniejƒÖ wyniki test√≥w
        const resultsPath = path.join(process.cwd(), 'test-results', 'results.json');
        
        if (fs.existsSync(resultsPath)) {
            const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
            
            console.log('\nüìä PODSUMOWANIE TEST√ìW MAS V2:');
            console.log('=====================================');
            console.log(`‚úÖ Testy passed: ${results.stats?.passed || 0}`);
            console.log(`‚ùå Testy failed: ${results.stats?.failed || 0}`);
            console.log(`‚è≠Ô∏è Testy skipped: ${results.stats?.skipped || 0}`);
            console.log(`‚è±Ô∏è Ca≈Çkowity czas: ${results.stats?.duration || 0}ms`);
            
            // Wygeneruj kr√≥tki raport
            const reportPath = path.join(process.cwd(), 'test-results', 'summary.txt');
            const reportContent = `
MAS V2 Test Summary
==================
Passed: ${results.stats?.passed || 0}
Failed: ${results.stats?.failed || 0}
Skipped: ${results.stats?.skipped || 0}
Duration: ${results.stats?.duration || 0}ms
Generated: ${new Date().toISOString()}
            `.trim();
            
            fs.writeFileSync(reportPath, reportContent);
            console.log(`üìù Raport zapisany w: ${reportPath}`);
        }
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Nie uda≈Ço siƒô wygenerowaƒá podsumowania:', error.message);
    }
    
    console.log('‚úÖ Global teardown zako≈Ñczony!');
}

module.exports = globalTeardown; 